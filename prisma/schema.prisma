datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextIndex"]
}

model Account {
  id                 String  @id @default(auto()) @map("_id") @db.ObjectId
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  scope              String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?
  expires_at         Int?
  userId             String  @db.ObjectId
  user               User    @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  @@unique([provider, providerAccountId])
}

model User {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  email        String?   
  nickname     String    
  password     String?
  introduction String?
  image        String?
  userBan      DateTime?
  updatedAt    DateTime  @updatedAt
  createdAt    DateTime  @default(now())
  delete       Boolean?
  type         String
  account      Account[]
  posts         Post[]
  postLike      PostLikes[]
  comments        Comment[]
  commentLikes    CommentLike[]  
  subComments     SubComment[]
  subCommentLikes SubCommentLike[]
}

model BookmarkMedicine{
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  medicineId   String    @db.ObjectId
  medicine      Medicine    @relation(fields: [medicineId], references: [id], onUpdate: Cascade, onDelete: Cascade)
}

model Medicine {
 id           String    @id @default(auto()) @map("_id") @db.ObjectId
 name         String
 image        String[]
 updatedAt    DateTime  @updatedAt
 createdAt    DateTime  @default(now())
 description  String
 tag          String
 bookMark     BookmarkMedicine[]
}


model Post {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  number       Int       @unique 
  title         String
  body          String
  views         Int       @default(1)
  likeCount     Int       @default(0)
  thumbnail     String?
  createdAt   DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  user        User      @relation(fields: [userId], references: [id])
  userId      String    @db.ObjectId
  comments    Comment[]
  like        PostLikes[]
  tag         Tag[]  @relation(fields: [tagId], references: [id])
  tagId      String[] @db.ObjectId
}


model PostLikes{
    id          String    @id @default(auto()) @map("_id") @db.ObjectId
    user        User     @relation(fields: [userId], references: [id])
    userId      String    @db.ObjectId
    post        Post   @relation(fields: [postId], references: [id],onUpdate: Cascade, onDelete: Cascade)
    postId      String @db.ObjectId
}

model Tag{
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String    @unique
  post        Post[]  @relation(fields: [postId], references: [id])
  postId      String[] @db.ObjectId
}

model Comment {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  post        Post   @relation(fields: [postId], references: [id],onUpdate: Cascade, onDelete: Cascade)
  postId      String @db.ObjectId
  user        User  @relation(fields: [userId], references: [id],onUpdate: Cascade, onDelete: Cascade)
  userId      String  @db.ObjectId
  body        String
  blind       Boolean @default(false)
  length      Int
  update      Boolean @default(false)
  commentLike CommentLike[]
  subComments SubComment[]
  updatedAt   DateTime @updatedAt
  createdAt   DateTime @default(now())
}
model CommentLike{
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  user        User     @relation(fields: [userId], references: [id],onUpdate: Cascade, onDelete: Cascade)
  userId      String   @db.ObjectId
  comment     Comment  @relation(fields: [commentId], references: [id],onUpdate: Cascade, onDelete: Cascade)
  commentId   String   @db.ObjectId
}

model SubComment{
    id          String @id @default(auto()) @map("_id") @db.ObjectId
    comment     Comment @relation(fields: [commentId], references: [id],onUpdate: Cascade, onDelete: Cascade)
    commentId   String  @db.ObjectId
    user        User  @relation(fields: [userId], references: [id],onUpdate: Cascade, onDelete: Cascade)
    userId      String  @db.ObjectId
    body        String
    length      Int
    blind       Boolean @default(false)
    like        SubCommentLike[]
    update      Boolean @default(false)
    updatedAt   DateTime @updatedAt
    createdAt   DateTime @default(now())
}
model SubCommentLike{
    id            String @id @default(auto()) @map("_id") @db.ObjectId
    user          User  @relation(fields: [userId], references: [id])
    userId        String  @db.ObjectId
    subComment     SubComment @relation(fields: [subCommentId], references: [id],onUpdate: Cascade, onDelete: Cascade)
    subCommentId   String  @db.ObjectId
}



